#!/bin/bash

lock_file="/var/lock/apt-fetch"
log_file="/var/log/apt-fetch-$(date '+%A').log"
# download rate limit
rate_limit="56K"
# if lock file is older than this many seconds, assume it's stale
lock_file_max_age=86400

db()
{
   echo "["$(date +"%Y-%m-%d %H:%M:%S")"] $*" >> ${log_file}
}

# Check if the lock file exists
if [ -f "${lock_file}" ]; then
    do_remove=0
    db ("found a lock file")

    # check age of lockfile and remove and continue if too old
    file_timestamp=$(stat -c "%Y" "${lock_file}")
    current_time=$(date +%s)
    age=$((current_time - file_timestamp))
    db ("found a lock file ${age} seconds old")
 
    # Read PID from the lock file
    pid=$(cat "$lock_file" 2>/dev/null)

    if [ "${age}" -gt "${threshold}" ]; then
        db "The file ${lock_file} appears to be stale. Removing it."
        do_remove=1
    fi

    # Check if the PID is a valid number
    if [[ "$pid" =~ ^[0-9]+$ ]]; then
        # Check if the process with the PID is running
        if [[ $(ps -p "${pid}" -o pid=) ]]; then
            db "Another instance of the script is already running with PID ${pid}. Exiting."
            exit 1
        else
            do_remove=1
        fi
    fi

    if [ ${do_remove} = "1" ]; then
        db "Stale lock file found for PID ${pid}. Removing."
        rm -f ${lock_file}
    fi

fi

# Write the current PID to the lock file
echo "$$" > "${lock_file}"

# Run apt-get update and apt-get dist-upgrade download only with rate limit
db "checking latest apt.."
/usr/bin/apt-get update >> "${log_file}" 2>&1 && /usr/bin/apt-get dist-upgrade -y --quiet --download-only -o Acquire::http::Dl-Limit="${rate_limit}" >> "${log_file}" 2>&1

# Remove the lock file after completing the update and upgrade
rm "${lock_file}"
db "apt-fetch complete."


